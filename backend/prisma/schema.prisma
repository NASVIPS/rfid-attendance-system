// schema.prisma

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum DayOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

model Department {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  code    String   @unique
  name    String
  courses Course[]

  @@map("departments") // Correct collection name
}

model Course {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  department    Department @relation(fields: [departmentId], references: [id])
  departmentId  String     @db.ObjectId
  name          String
  durationYears Int
  degreeType    String
  semesters     Semester[]

  @@map("courses") // Correct collection name
}

model Semester {
  id              String            @id @default(auto()) @map("_id") @db.ObjectId
  course          Course            @relation(fields: [courseId], references: [id])
  courseId        String            @db.ObjectId
  number          Int
  type            String
  academicYear    Int               @default(2024)
  sections        Section[]
  SemesterSubject SemesterSubject[]

  @@unique([courseId, number, academicYear])
  @@map("semesters") // Correct collection name
}

model Section {
  id               String           @id @default(auto()) @map("_id") @db.ObjectId
  name             String
  semester         Semester         @relation(fields: [semesterId], references: [id])
  semesterId       String           @db.ObjectId
  students         Student[]
  instances        SubjectInstance[]
  scheduledClasses ScheduledClass[]

  @@map("sections") // Correct collection name
}

model Subject {
  id               String            @id @default(auto()) @map("_id") @db.ObjectId
  code             String            @unique
  name             String
  credits          Int?
  instances        SubjectInstance[]
  scheduledClasses ScheduledClass[]
  SemesterSubject  SemesterSubject[]

  @@map("subjects") // Correct collection name
}

model SubjectInstance {
  id             String         @id @default(auto()) @map("_id") @db.ObjectId
  subject        Subject        @relation(fields: [subjectId], references: [id])
  subjectId      String         @db.ObjectId
  section        Section        @relation(fields: [sectionId], references: [id])
  sectionId      String         @db.ObjectId
  faculty        Faculty        @relation(fields: [facultyId], references: [id], onDelete: Cascade)
  facultyId      String         @db.ObjectId
  classSessions  ClassSession[]
  ScheduledClass ScheduledClass[]

  @@unique([subjectId, sectionId, facultyId])
  @@map("subjectinstances") // Correct collection name
}

model User {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  email          String   @unique
  passwordHash   String
  role           String // ADMIN | PCOORD | TEACHER
  facultyProfile Faculty? // This relation is now defined in the Faculty model

  @@map("users") // Correct collection name
}

model Faculty {
  id               String            @id @default(auto()) @map("_id") @db.ObjectId
  user             User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId           String            @unique @db.ObjectId
  empId            String            @unique
  name             String
  phone            String
  rfidUid          String            @unique
  devices          Device[]
  subjectInstances SubjectInstance[]
  classSessions    ClassSession[]
  scheduledClasses ScheduledClass[]

  @@map("faculties") // Correct collection name
}

model Student {
  id           String          @id @default(auto()) @map("_id") @db.ObjectId
  rfidUid      String          @unique
  enrollmentNo String          @unique
  name         String
  phone        String?
  section      Section         @relation(fields: [sectionId], references: [id])
  sectionId    String          @db.ObjectId
  logs         AttendanceLog[]

  @@map("students") // Correct collection name
}

model Device {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  macAddr       String          @unique
  secret        String
  name          String?
  location      String?
  lastBootAt    DateTime?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime?       @updatedAt
  faculty       Faculty?        @relation(fields: [facultyId], references: [id])
  facultyId     String?         @db.ObjectId
  classSessions ClassSession[]
  logs          AttendanceLog[]

  @@map("devices") // Correct collection name
}

model ClassSession {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  subjectInst   SubjectInstance @relation(fields: [subjectInstId], references: [id])
  subjectInstId String          @db.ObjectId
  teacher       Faculty         @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  teacherId     String          @db.ObjectId
  device        Device?         @relation(fields: [deviceId], references: [id])
  deviceId      String?         @db.ObjectId
  startAt       DateTime
  endAt         DateTime?
  isClosed      Boolean         @default(false)
  logs          AttendanceLog[]

  @@map("classsessions") // Correct collection name
}

model AttendanceLog {
  id               String           @id @default(auto()) @map("_id") @db.ObjectId
  student          Student          @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId        String           @db.ObjectId
  session          ClassSession     @relation(fields: [sessionId], references: [id])
  sessionId        String           @db.ObjectId
  status           AttendanceStatus
  timestamp        DateTime         @default(now())
  device           Device           @relation(fields: [deviceId], references: [id])
  deviceId         String           @db.ObjectId
  deviceMacAddress String?
  manualOverride   Boolean          @default(false)

  @@unique([studentId, sessionId])
  @@map("attendancelogs") // Correct collection name
}

enum AttendanceStatus {
  PRESENT
  ABSENT
}

model ScheduledClass {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  dayOfWeek     DayOfWeek
  startTime     String // HH:MM:SS
  endTime       String
  subject       Subject         @relation(fields: [subjectId], references: [id])
  subjectId     String          @db.ObjectId
  section       Section         @relation(fields: [sectionId], references: [id])
  sectionId     String          @db.ObjectId
  faculty       Faculty?        @relation(fields: [facultyId], references: [id])
  facultyId     String?         @db.ObjectId
  subjectInst   SubjectInstance @relation(fields: [subjectInstId], references: [id])
  subjectInstId String          @db.ObjectId
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  @@unique([dayOfWeek, subjectId, sectionId, startTime, endTime])
  @@index([subjectInstId])
  @@map("scheduledclasses") // Correct collection name
}

model SemesterSubject {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  semester   Semester @relation(fields: [semesterId], references: [id])
  semesterId String   @db.ObjectId
  subject    Subject  @relation(fields: [subjectId], references: [id])
  subjectId  String   @db.ObjectId
  createdAt  DateTime @default(now())

  @@unique([semesterId, subjectId])
  @@map("semestersubjects") // Correct collection name
}